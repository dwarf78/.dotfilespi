* UI
** UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)


#+END_SRC
** frame size 
   #+BEGIN_SRC emacs-lisp
  (when window-system
    (set-frame-size (selected-frame) 110 38))

   #+END_SRC
** time format
   #+BEGIN_SRC emacs-lisp
     (setq display-time-24hr-format t)
     (setq display-time-format "%H:%M - %d %B %Y")
   #+END_SRC
** ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)

#+END_SRC
** interface tweaks
   #+BEGIN_SRC emacs-lisp
     (display-time)
     (global-font-lock-mode t)
     (setq inhibit-startup-message t)
     (setq line-number-mode t)
     (setq column-number-mode t)
     (tool-bar-mode -1)  
     (scroll-bar-mode -1)
     (setq font-lock-maximum-decoration t)
     (show-paren-mode t)
     (use-package linum-relative
	   :ensure t
	   :config
	     (setq linum-relative-current-symbol "")
	     (add-hook 'prog-mode-hook 'linum-relative-mode))
     (setq linum-relative-backend 'display-line-numbers-mode)
   #+END_SRC
** themes
   #+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init (load-theme 'spacemacs-dark t))

   #+END_SRC
* org-mode tweaks
  #+BEGIN_SRC emacs-lisp
	      ;; Org-mode stuff
		(use-package org-bullets
			      :ensure t
			      :config
			      (add-hook 'org-mode-hook 'org-bullets-mode)
			      )
    ;; Org-mode activation
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)

	      ;; Hide the emphasis markup (e.g. /.../ for italics, *...* for bold, etc.)
	      (setq org-hide-emphasis-markers t)

	      (custom-set-faces
		'(org-level-1 ((t (:inherit outline-1 :height 1.2))))
		'(org-level-2 ((t (:inherit outline-2 :height 1.1))))
		'(org-level-3 ((t (:inherit outline-3 :height 1.0))))
		'(org-level-4 ((t (:inherit outline-4 :height 0.9))))
		'(org-level-5 ((t (:inherit outline-5 :height 0.8))))
	      )

  #+END_SRC
** rainbow
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :init
       (add-hook 'prog-mode-hook 'rainbow-mode))

     (use-package rainbow-delimiters
       :ensure t
       :init
	 (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
** pretty
   #+BEGIN_SRC emacs-lisp 
     (when window-system
	   (use-package pretty-mode
	   :ensure t
	   :config
	   (global-pretty-mode t)))
   #+END_SRC
** spaceline
   #+BEGIN_SRC emacs-lisp
     (use-package spaceline
       :ensure t
       :config
       (require 'spaceline-config)
	 (setq spaceline-buffer-encoding-abbrev-p nil)
	 (setq spaceline-line-column-p nil)
	 (setq spaceline-line-p nil)
	 (setq powerline-default-separator (quote arrow))
	 (spaceline-spacemacs-theme))
     (setq powerline-default-separator nil)
   #+END_SRC
** highlight current line
   #+BEGIN_SRC emacs-lisp
     (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
   #+END_SRC

** beacon
   #+BEGIN_SRC emacs-lisp
; flashes the cursor's line when you scroll
     (use-package beacon
     :ensure t
     :config
     (beacon-mode 1)
     ;(setq beacon-color "#666600")
     )
   #+END_SRC
** all the icons
   #+BEGIN_SRC emacs-lisp
     (when window-system
       (use-package all-the-icons
	 :ensure t
	 :init
	 )
     ;; (all-the-icons-install-fonts t)		
     )
   #+END_SRC
** dashboard
   #+BEGIN_SRC emacs-lisp
  (when window-system (use-package dashboard
    :ensure t
    :config
      (dashboard-setup-startup-hook)
      (setq dashboard-startup-banner 'logo)
      (setq dashboard-center-content t)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-items '((recents  . 5)
			      (projects . 5)))
      (setq dashboard-banner-logo-title ""))
)
   #+END_SRC
** company
   #+BEGIN_SRC  emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3))

(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous)
  (define-key company-active-map (kbd "SPC") #'company-abort))
   #+END_SRC
   
** ace window
   #+BEGIN_SRC emacs-lisp
 (use-package ace-window
  :ensure t
  :init
  (progn
  (setq aw-scope 'global) ;; was frame
  (global-set-key (kbd "C-x O") 'other-frame)
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
	((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
   #+END_SRC
** swiper
   #+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
	  ("C-r" . swiper-isearch)
	  ("C-c C-r" . ivy-resume)
	  ("M-x" . counsel-M-x)
	  ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))  
   #+END_SRC
** ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t
       :diminish (ivy-mode)
       :bind (("C-x b" . ivy-switch-buffer))
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "%d/%d ")
       (setq ivy-display-style 'fancy))
     (use-package which-key
       :ensure t
       :config
	 (which-key-mode))
   #+END_SRC
** avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind
	 ("M-s" . avy-goto-char-2))

	 
   #+END_SRC
** counsel
   #+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))
   #+END_SRC
** following windows splits
   #+BEGIN_SRC emacs-lisp

     (defun split-and-follow-horizontally ()
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

     (defun split-and-follow-vertically ()
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
   #+END_SRC
** visiting and reloading configuration
   #+BEGIN_SRC emacs-lisp
     (defun config-visit ()
       (interactive)
       (find-file "~/.emacs.d/myinit.org"))
     (global-set-key (kbd "C-c e") 'config-visit)

     (defun config-reload ()
       "Reloads ~/.emacs.d/config.org at runtime"
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org")))
     (global-set-key (kbd "C-c r") 'config-reload)
   #+END_SRC
** y-or-n
   #+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Programming
** C/C++
   #+BEGIN_SRC emacs-lisp
     (use-package ggtags
     :ensure t
     :config 
     (add-hook 'c-mode-common-hook
	       (lambda ()
		 (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		   (ggtags-mode 1))))
     )

     (add-hook 'c++-mode-hook 'yas-minor-mode)
     (add-hook 'c-mode-hook 'yas-minor-mode)

     (use-package flycheck-clang-analyzer
       :ensure t
       :config
       (with-eval-after-load 'flycheck
	 (require 'flycheck-clang-analyzer)
	  (flycheck-clang-analyzer-setup)))

     (with-eval-after-load 'company
       (add-hook 'c++-mode-hook 'company-mode)
       (add-hook 'c-mode-hook 'company-mode))

     (use-package company-c-headers
       :ensure t)

     (use-package company-irony
       :ensure t
       :config
       (setq company-backends '((company-c-headers
				 company-dabbrev-code
				 company-irony))))

     (use-package irony
       :ensure t
       :config
       (add-hook 'c++-mode-hook 'irony-mode)
       (add-hook 'c-mode-hook 'irony-mode)
       (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

   #+END_SRC
** flycheck
   #+BEGIN_SRC emacs-lisp
(use-package flycheck
:ensure t
:init
(global-flycheck-mode t))

   #+END_SRC
** yasnippet
   #+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (use-package yasnippet-snippets
  :ensure t)
  (yas-global-mode 1))

   #+END_SRC

** smart parens
   #+BEGIN_SRC emacs-lisp
(use-package smartparens
 :ensure t
   :hook (prog-mode . smartparens-mode)
   :custom
   (sp-escape-quotes-after-insert nil)
   :config
   (require 'smartparens-config))

   #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :init
	 (projectile-mode 1))
   #+END_SRC
** mark multiple
   #+BEGIN_SRC emacs-lisp
     (use-package mark-multiple
       :ensure t
       :bind ("C-c q" . 'mark-next-like-this))
   #+END_SRC
** terminal
   #+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-zsh)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

   #+END_SRC
** compiler explorer
#+BEGIN_SRC emacs-lisp
    (use-package rmsbolt
      :ensure t
     :bind ("C-c C-c a" . 'rmsbolt-starter)
           )

#+END_SRC

* Version Control
** magit
   #+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("C-x g" . magit-status))
   #+END_SRC
* Manually installed

